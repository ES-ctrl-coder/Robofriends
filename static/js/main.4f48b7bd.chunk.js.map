{"version":3,"sources":["reportWebVitals.js","Card.js","CardList.js","SearchBox.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","id","className","width","height","alt","src","name","email","CardList","robots","cardComponent","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oCCOCQ,MAZf,SAAcC,GACV,OACI,sBAAKC,GAAG,MAAMC,UAAU,yDAAxB,UACI,qBAAKC,MAAM,QAAQC,OAAO,QAAQC,IAAI,QAAQC,IAAG,+BAA0BN,EAAMC,MACjF,gCACI,6BAAKD,EAAMO,OACX,4BAAIP,EAAMQ,eCWXC,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OACA,cAAC,EAAD,CACCb,GAAIS,EAAOI,GAAGb,GACdM,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,OAHPM,MAMf,OACI,8BACKH,KCGEI,G,MAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC5B,OACI,qBAAKf,UAAU,MAAf,SACI,uBACIA,UAAU,gCACVgB,KAAK,SACLC,YAAY,yBACZC,SAAUH,QC0CXI,G,wDA5CX,aAAc,IAAD,8BACT,gBAiBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAjBzC,EAAKC,MAAQ,CACTjB,OAAQ,GACRM,YAAa,IAJR,E,gEAQO,IAAD,OACfY,MAAM,8CACLnC,MAAK,SAAAoC,GACF,OAAOA,EAASC,UAEnBrC,MAAK,SAAAsC,GACF,EAAKP,SAAS,CAACd,OAAQqB,S,+BAQtB,IAAD,OACEC,EAAiBC,KAAKN,MAAMjB,OAAOwB,QAAO,SAAAxB,GAC5C,OAAOA,EAAOH,KAAK4B,cAAcC,SAAS,EAAKT,MAAMX,YAAYmB,kBAGrE,OAAgC,IAA7BF,KAAKN,MAAMjB,OAAO2B,OAEV,oBAAInC,UAAU,KAAd,wBAIH,sBAAKA,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWe,aAAgBgB,KAAKX,iBAChC,cAAC,EAAD,CAAUZ,OAAQsB,W,GArCpBM,cCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BrD,M","file":"static/js/main.4f48b7bd.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div id=\"box\" className=\"tc bg-blue dib br3 pa3 ma3 grow bw1 ba b--red shadow-5\">\r\n            <img width=\"180px\" height=\"180px\" alt=\"robot\" src={`https://robohash.org/${props.id}`} />\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponent = robots.map((user,i) => {\r\n        return (\r\n        <Card key={i}\r\n         id={robots[i].id} \r\n         name={robots[i].name}\r\n         email={robots[i].email}/>);\r\n    });\r\n    \r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({searchField,searchChange}) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--black bg-light-blue\"\r\n                type='search'\r\n                placeholder='Type to Search Robots!'\r\n                onChange={searchChange}\r\n            ></input>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport {robots} from './robots';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(users => {\r\n            this.setState({robots: users});\r\n        });\r\n\r\n    }\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value});\r\n\r\n    }\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        });\r\n\r\n        if(this.state.robots.length === 0)\r\n        {\r\n            return <h1 className='tc'>Loading...</h1>\r\n        }\r\n        else{\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robofriends</h1>\r\n                    <SearchBox searchChange = {this.onSearchChange}/>\r\n                    <CardList robots={filteredRobots}/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}